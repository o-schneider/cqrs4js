{"version":3,"sources":["../../src/main/js/message/Message.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;wBAEI,WAAW;;;;0BACR,gBAAgB;;gCACV,sBAAsB;;;;;;;;;IAQnC,OAAO,GAEP,SAFA,OAAO,CAEN,IAAI,EAAE,aAAa,EAAE;wBAFtB,OAAO;;AAGhB,oBAAM,OAAO,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;AAC9B,MAAI,CAAC,IAAI,GAAG,sBAAK,EAAE,EAAE,CAAC;AACtB,MAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,MAAI,CAAC,OAAO,GAAG,aAAa,CAAC;AAC7B,gCAAY,UAAU,CAAC,IAAI,CAAC,CAAC;CAC9B","file":"Message.js","sourcesContent":["'use strict';\n\nimport Uuid from 'node-uuid';\nimport {check} from '../utils/check';\nimport {ObjectUtils} from '../utils/ObjectUtils';\n\n// The Message class freezes all its attributes in the constructor: no other attribute can be added and current ones can have their value modified.\n// Mind though that Object.freeze don't throw exception when trying to set a value, the new value is silently ignored. It throws a TypeError when trying to add new attributes.\n//\n// The name is mandatory.\n//\n// Message's subclasses must wrap their own attributes in the payload and define getters.\nexport class Message {\n\n  constructor(name, payloadOrNull) {\n    check.notNull({'name': name});\n    this.uuid = Uuid.v4(); // TODO : check generation time\n    this.name = name;\n    this.payload = payloadOrNull;\n    ObjectUtils.freezeDeep(this);\n  }\n}\n"]}