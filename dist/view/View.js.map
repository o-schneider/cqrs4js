{"version":3,"sources":["../../src/main/js/view/View.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;sBAEc,QAAQ;;0BACf,gBAAgB;;sBACtB,QAAQ;;;;AAEtB,IAAM,GAAG,GAAG,KAAK,CAAC;;IAEL,IAAI;AAEJ,WAFA,IAAI,CAEH,QAAQ,EAAmC;sCAA9B,4BAA4B;AAA5B,kCAA4B;;;0BAF1C,IAAI;;AAGb,sBAAM,OAAO,CAAC,EAAC,UAAU,EAAE,QAAQ,EAAC,CAAC,CAAC;AACtC,6BAAU,CAAC,0EAA0E,EAAE,YAAY;AACjG,aAAO,4BAA4B,IAAI,IAAI,IAAI,4BAA4B,CAAC,MAAM,IAAI,CAAC,CAAC;KACzF,CAAC,CAAC;;AAEH,QAAM,IAAI,GAAG,IAAI,CAAC;AAClB,wBAAE,OAAO,CAAC,4BAA4B,EAAE,UAAC,aAAa,EAAK;AACzD,UAAM,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC;AAChC,UAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;;AAEpC,UAAI,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,yBAAyB,GAAG,IAAI,GAAG,cAAc,GAAG,MAAM,CAAC,CAAC;;AAEjF,+BAAU,CAAC,8BAA8B,EAAE,YAAM;AAC/C,eAAO,OAAO,IAAI,KAAK,QAAQ,IAAI,MAAM,YAAY,QAAQ,CAAA;OAC9D,CAAC,CAAC;;AAEH,cAAQ,CAAC,SAAS,CAAC,IAAI,EAAE,UAAC,OAAO,EAAI;AACnC,cAAM,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;AACjC,YAAI,CAAC,OAAO,EAAE,CAAC;OAChB,CAAC,CAAC;KACJ,CAAC,CAAC;AACH,QAAI,CAAC,cAAc,GAAG,0BAAkB,CAAC;GAC1C;;eAzBU,IAAI;;WA2BR,mBAAG;AAAE,UAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAAE;;;WAE5C,eAAC,GAAG,EAAE;;;AACT,UAAI,CAAC,cAAc,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AACtC,aAAO;eAAM,MAAK,cAAc,CAAC,cAAc,CAAC,QAAQ,EAAE,GAAG,CAAC;OAAA,CAAC;KAChE;;;SAhCU,IAAI","file":"View.js","sourcesContent":["'use strict';\n\nimport {EventEmitter} from 'events';\nimport {check} from '../check/check';\nimport _ from 'lodash';\n\nconst log = false;\n\nexport class View {\n\n  constructor(eventBus, ...listenedEventTypesAndActions) {\n    check.notNull({'eventBus': eventBus});\n    check.true(\"listenedEventTypesAndActions should contain at least one type and action\", function () {\n      return listenedEventTypesAndActions != null && listenedEventTypesAndActions.length != 0;\n    });\n\n    const view = this;\n    _.forEach(listenedEventTypesAndActions, (actionAndType) => {\n      const type = actionAndType.type;\n      const action = actionAndType.action;\n\n      if (log) console.log('about to register type ' + type + \" and action \" + action);\n\n      check.true(\"type and action both present\", () => {\n        return typeof type === \"string\" && action instanceof Function\n      });\n\n      eventBus.subscribe(type, (message)=> {\n        action.call(null, message, view);\n        view.changed();\n      });\n    });\n    this.messageEmitter = new EventEmitter();\n  }\n\n  changed() { this.messageEmitter.emit('change'); }\n\n  watch(cbk) {\n    this.messageEmitter.on('change', cbk);\n    return () => this.messageEmitter.removeListener('change', cbk);\n  }\n}\n"]}